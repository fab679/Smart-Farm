datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  name String
  email String @unique
  phone String @unique


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  address Address[]
  orders Order[]
}

model Admin{
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  
}

model Password {
  id String @id @default(cuid())
  hash String

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?
  farm   Farm?   @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String? 
  pickup PickUpStation? @relation(fields: [pickupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pickupId String?
  admin Admin? @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId String?
}

model Farm{
  id    String @id @default(cuid())
  name  String @unique
  email String @unique
  verified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  address    Address?
  description Description?
  farmowner  FarmOwner?
  harvest PotatoHarvest[]
  orderItems OrderItem[]
}

model FarmOwner{
  id    String @id @default(cuid())
  firstname String
  lastname String
  phone String @unique
  idNumber String
  frontIdImageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 

  farm   Farm?   @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String @unique
}

model Description {
  id    String @id @default(cuid())
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farm   Farm?   @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String @unique
}

model PotatoHarvest {
  id    String @id @default(cuid())
  variety  String
  quantity Int
  initialQuantity Int
  unitWeight Float
  price Float
  discount Float @default(0)
  type String
  imgUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  farm   Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String 

  orderItems OrderItem[]
}


model Order{
  id    String @id @default(cuid())
  status String
  total Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String 
  

  orderItems OrderItem[]
  payment Payment?

  address Address? @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  addressId String
  
}

model OrderDetails{
  id   String @id @default(cuid())
  
}

model OrderItem{
  id    String @id @default(cuid())
  quantity Int
  price Float
  status String @default("placed")
  


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String 

  potato PotatoHarvest   @relation(fields: [potatoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  potatoId String 
  farm  Farm   @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String 
}

model Payment{
  id    String @id @default(cuid())
  amount Float
  status String 
  paymentMethod String
  paymentReference String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @unique
}

model PickUpStation{
  id    String @id @default(cuid())
  name  String @unique
  email String @unique


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  address    Address?
}

model Region {
  id    String @id @default(cuid())
  name  String 

  location Location[]
 

  }

model Location{
  id    String @id @default(cuid())
  name  String 

  region Region  @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionId String 

  address Address[]
  }


model Address {
  id    String @id @default(cuid())
  name  String 



  location Location  @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId String 
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? 

  farms  Farm? @relation(fields: [farmId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  farmId String?

  pickup PickUpStation? @relation(fields: [pickupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pickupId String?

  orderItems Order[]

  }
